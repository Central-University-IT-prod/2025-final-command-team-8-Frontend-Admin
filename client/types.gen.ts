// This file is auto-generated by @hey-api/openapi-ts

export type Admin = {
    email: string;
    id: string;
};

export type AdminAuthResponse = {
    admin: Admin;
    token: string;
};

export type AdminForm = Credentials;

export type AdminUpdate = {
    email?: string | null;
};

export type ApiError = {
    description: string;
    error: string;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
    new_password_confirm: string;
};

export type Client = ClientDisplay & {
    email: string;
    id: string;
    is_internal: boolean;
    send_notifications: boolean;
    verified: boolean;
};

export type ClientAuthResponse = {
    client: Client;
    token: string;
};

export type ClientDisplay = {
    name: string;
    patronymic: string;
    surname: string;
};

export type ClientForm = ClientDisplay & Credentials & {
    send_notifications: boolean;
};

export type ClientUpdate = {
    email?: string | null;
    name?: string | null;
    patronymic?: string | null;
    send_notifications?: boolean | null;
    surname?: string | null;
};

export type Coworking = CreateCoworking & {
    id: string;
    seats: CoworkingSeatStats;
};

export type CoworkingSeatStats = {
    available: number;
    total: number;
};

export type CoworkingUpdate = {
    address?: string | null;
    name?: string | null;
};

export type CreateCoworking = {
    address: string;
    name: string;
};

export type CreateReservation = {
    ends_at: string;
    seat_id: string;
    starts_at: string;
};

export type CreateSeat = {
    cost: number;
    features: Array<SeatFeature>;
    number: number;
    type: SeatType;
};

export type Credentials = {
    email: string;
    password: string;
};

export type Reservation = CreateReservation & {
    cancelled: boolean;
    client_id: string;
    id: string;
};

export type ReservationUpdate = {
    ends_at?: string | null;
    seat_id?: string | null;
    starts_at?: string | null;
};

export type Seat = CreateSeat & {
    id: string;
};

export type SeatFeature = 'monitor' | 'laptop';

export type SeatType = 'openspace' | {
    cabin: number;
} | {
    room: number;
};

export type SeatUpdate = {
    cost?: number | null;
    features: Array<SeatFeature>;
    number?: number | null;
    type?: null | SeatType;
};

export type DeleteAdminAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin';
};

export type DeleteAdminAccountErrors = {
    /**
     * Invalid password
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type DeleteAdminAccountError = DeleteAdminAccountErrors[keyof DeleteAdminAccountErrors];

export type DeleteAdminAccountResponses = {
    204: void;
};

export type DeleteAdminAccountResponse = DeleteAdminAccountResponses[keyof DeleteAdminAccountResponses];

export type GetCurrentAdminAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin';
};

export type GetCurrentAdminAccountErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetCurrentAdminAccountError = GetCurrentAdminAccountErrors[keyof GetCurrentAdminAccountErrors];

export type GetCurrentAdminAccountResponses = {
    200: Admin;
};

export type GetCurrentAdminAccountResponse = GetCurrentAdminAccountResponses[keyof GetCurrentAdminAccountResponses];

export type EditAdminAccountData = {
    body: AdminUpdate;
    path?: never;
    query?: never;
    url: '/api/admin';
};

export type EditAdminAccountErrors = {
    /**
     * Invalid body
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type EditAdminAccountError = EditAdminAccountErrors[keyof EditAdminAccountErrors];

export type EditAdminAccountResponses = {
    /**
     * Profile was successfully edited
     */
    200: Admin;
};

export type EditAdminAccountResponse = EditAdminAccountResponses[keyof EditAdminAccountResponses];

export type AdminLoginData = {
    body: Credentials;
    path?: never;
    query?: never;
    url: '/api/admin/login';
};

export type AdminLoginErrors = {
    /**
     * Request body isn't valid
     */
    400: ApiError;
};

export type AdminLoginError = AdminLoginErrors[keyof AdminLoginErrors];

export type AdminLoginResponses = {
    /**
     * Logged in successfuly
     */
    200: AdminAuthResponse;
};

export type AdminLoginResponse = AdminLoginResponses[keyof AdminLoginResponses];

export type ChangeAdminPasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/admin/password';
};

export type ChangeAdminPasswordErrors = {
    /**
     * New password confirmation failed
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type ChangeAdminPasswordError = ChangeAdminPasswordErrors[keyof ChangeAdminPasswordErrors];

export type ChangeAdminPasswordResponses = {
    /**
     * Password was successfully changed
     */
    200: AdminAuthResponse;
};

export type ChangeAdminPasswordResponse = ChangeAdminPasswordResponses[keyof ChangeAdminPasswordResponses];

export type RegisterAdminData = {
    body: AdminForm;
    path?: never;
    query?: never;
    url: '/api/admin/register';
};

export type RegisterAdminErrors = {
    /**
     * Request body isn't valid
     */
    400: ApiError;
};

export type RegisterAdminError = RegisterAdminErrors[keyof RegisterAdminErrors];

export type RegisterAdminResponses = {
    /**
     * Registration is successful
     */
    200: AdminAuthResponse;
};

export type RegisterAdminResponse = RegisterAdminResponses[keyof RegisterAdminResponses];

export type DeleteAdminByIdData = {
    body?: never;
    path: {
        /**
         * Admin ID
         */
        admin_id: string;
    };
    query?: never;
    url: '/api/admin/{admin_id}';
};

export type DeleteAdminByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type DeleteAdminByIdError = DeleteAdminByIdErrors[keyof DeleteAdminByIdErrors];

export type DeleteAdminByIdResponses = {
    204: void;
};

export type DeleteAdminByIdResponse = DeleteAdminByIdResponses[keyof DeleteAdminByIdResponses];

export type GetAdminByIdData = {
    body?: never;
    path: {
        /**
         * Admin ID
         */
        admin_id: string;
    };
    query?: never;
    url: '/api/admin/{admin_id}';
};

export type GetAdminByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type GetAdminByIdError = GetAdminByIdErrors[keyof GetAdminByIdErrors];

export type GetAdminByIdResponses = {
    200: Admin;
};

export type GetAdminByIdResponse = GetAdminByIdResponses[keyof GetAdminByIdResponses];

export type EditAdminByIdData = {
    body: AdminUpdate;
    path: {
        /**
         * Admin ID
         */
        admin_id: string;
    };
    query?: never;
    url: '/api/admin/{admin_id}';
};

export type EditAdminByIdErrors = {
    /**
     * Invalid body
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type EditAdminByIdError = EditAdminByIdErrors[keyof EditAdminByIdErrors];

export type EditAdminByIdResponses = {
    /**
     * Profile was successfully edited
     */
    200: Admin;
};

export type EditAdminByIdResponse = EditAdminByIdResponses[keyof EditAdminByIdResponses];

export type DeleteClientAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/client';
};

export type DeleteClientAccountErrors = {
    /**
     * Invalid password
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type DeleteClientAccountError = DeleteClientAccountErrors[keyof DeleteClientAccountErrors];

export type DeleteClientAccountResponses = {
    204: void;
};

export type DeleteClientAccountResponse = DeleteClientAccountResponses[keyof DeleteClientAccountResponses];

export type GetCurrentClientAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/client';
};

export type GetCurrentClientAccountErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetCurrentClientAccountError = GetCurrentClientAccountErrors[keyof GetCurrentClientAccountErrors];

export type GetCurrentClientAccountResponses = {
    200: Client;
};

export type GetCurrentClientAccountResponse = GetCurrentClientAccountResponses[keyof GetCurrentClientAccountResponses];

export type EditClientAccountData = {
    body: ClientUpdate;
    path?: never;
    query?: never;
    url: '/api/client';
};

export type EditClientAccountErrors = {
    /**
     * Invalid body
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type EditClientAccountError = EditClientAccountErrors[keyof EditClientAccountErrors];

export type EditClientAccountResponses = {
    /**
     * Profile was successfully edited
     */
    200: Client;
};

export type EditClientAccountResponse = EditClientAccountResponses[keyof EditClientAccountResponses];

export type ClientLoginData = {
    body: Credentials;
    path?: never;
    query?: never;
    url: '/api/client/login';
};

export type ClientLoginErrors = {
    /**
     * Request body isn't valid
     */
    400: ApiError;
};

export type ClientLoginError = ClientLoginErrors[keyof ClientLoginErrors];

export type ClientLoginResponses = {
    /**
     * Logged in successfuly
     */
    200: ClientAuthResponse;
};

export type ClientLoginResponse = ClientLoginResponses[keyof ClientLoginResponses];

export type ChangeClientPasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/client/password';
};

export type ChangeClientPasswordErrors = {
    /**
     * New password confirmation failed
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type ChangeClientPasswordError = ChangeClientPasswordErrors[keyof ChangeClientPasswordErrors];

export type ChangeClientPasswordResponses = {
    /**
     * Password was successfully changed
     */
    200: ClientAuthResponse;
};

export type ChangeClientPasswordResponse = ChangeClientPasswordResponses[keyof ChangeClientPasswordResponses];

export type RegisterClientData = {
    body: ClientForm;
    path?: never;
    query?: never;
    url: '/api/client/register';
};

export type RegisterClientErrors = {
    /**
     * Request body isn't valid
     */
    400: ApiError;
};

export type RegisterClientError = RegisterClientErrors[keyof RegisterClientErrors];

export type RegisterClientResponses = {
    /**
     * Registration is successful
     */
    200: ClientAuthResponse;
};

export type RegisterClientResponse = RegisterClientResponses[keyof RegisterClientResponses];

export type GetClientReservationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number | null;
        offset?: number | null;
    };
    url: '/api/client/reservations';
};

export type GetClientReservationsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetClientReservationsError = GetClientReservationsErrors[keyof GetClientReservationsErrors];

export type GetClientReservationsResponses = {
    200: Array<Reservation>;
};

export type GetClientReservationsResponse = GetClientReservationsResponses[keyof GetClientReservationsResponses];

export type DeleteClientByIdData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        client_id: string;
    };
    query?: never;
    url: '/api/client/{client_id}';
};

export type DeleteClientByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type DeleteClientByIdError = DeleteClientByIdErrors[keyof DeleteClientByIdErrors];

export type DeleteClientByIdResponses = {
    204: void;
};

export type DeleteClientByIdResponse = DeleteClientByIdResponses[keyof DeleteClientByIdResponses];

export type GetClientByIdData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        client_id: string;
    };
    query?: never;
    url: '/api/client/{client_id}';
};

export type GetClientByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type GetClientByIdError = GetClientByIdErrors[keyof GetClientByIdErrors];

export type GetClientByIdResponses = {
    200: Client;
};

export type GetClientByIdResponse = GetClientByIdResponses[keyof GetClientByIdResponses];

export type EditClientByIdData = {
    body: ClientUpdate;
    path: {
        /**
         * Client ID
         */
        client_id: string;
    };
    query?: never;
    url: '/api/client/{client_id}';
};

export type EditClientByIdErrors = {
    /**
     * Invalid body
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type EditClientByIdError = EditClientByIdErrors[keyof EditClientByIdErrors];

export type EditClientByIdResponses = {
    /**
     * Profile was successfully edited
     */
    200: Client;
};

export type EditClientByIdResponse = EditClientByIdResponses[keyof EditClientByIdResponses];

export type GetClientReservationsByIdData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        client_id: string;
    };
    query?: {
        limit?: number | null;
        offset?: number | null;
    };
    url: '/api/client/{client_id}/reservations';
};

export type GetClientReservationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetClientReservationsByIdError = GetClientReservationsByIdErrors[keyof GetClientReservationsByIdErrors];

export type GetClientReservationsByIdResponses = {
    200: Array<Reservation>;
};

export type GetClientReservationsByIdResponse = GetClientReservationsByIdResponses[keyof GetClientReservationsByIdResponses];

export type GetCoworkingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/coworking';
};

export type GetCoworkingErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetCoworkingError = GetCoworkingErrors[keyof GetCoworkingErrors];

export type GetCoworkingResponses = {
    200: Coworking;
};

export type GetCoworkingResponse = GetCoworkingResponses[keyof GetCoworkingResponses];

export type EditCoworkingData = {
    body: CoworkingUpdate;
    path?: never;
    query?: never;
    url: '/api/coworking';
};

export type EditCoworkingErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type EditCoworkingError = EditCoworkingErrors[keyof EditCoworkingErrors];

export type EditCoworkingResponses = {
    200: Coworking;
};

export type EditCoworkingResponse = EditCoworkingResponses[keyof EditCoworkingResponses];

export type GetCoworkingSeatsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number | null;
        offset?: number | null;
    };
    url: '/api/coworking/seats';
};

export type GetCoworkingSeatsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
};

export type GetCoworkingSeatsError = GetCoworkingSeatsErrors[keyof GetCoworkingSeatsErrors];

export type GetCoworkingSeatsResponses = {
    200: Array<Seat>;
};

export type GetCoworkingSeatsResponse = GetCoworkingSeatsResponses[keyof GetCoworkingSeatsResponses];

export type CreateSeatData = {
    body: CreateSeat;
    path?: never;
    query?: never;
    url: '/api/coworking/seats';
};

export type CreateSeatErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type CreateSeatError = CreateSeatErrors[keyof CreateSeatErrors];

export type CreateSeatResponses = {
    201: Seat;
};

export type CreateSeatResponse = CreateSeatResponses[keyof CreateSeatResponses];

export type DeleteSeatByIdData = {
    body?: never;
    path: {
        /**
         * Seat ID
         */
        seat_id: string;
    };
    query?: never;
    url: '/api/coworking/seats/{seat_id}';
};

export type DeleteSeatByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type DeleteSeatByIdError = DeleteSeatByIdErrors[keyof DeleteSeatByIdErrors];

export type DeleteSeatByIdResponses = {
    204: void;
};

export type DeleteSeatByIdResponse = DeleteSeatByIdResponses[keyof DeleteSeatByIdResponses];

export type GetSeatByIdData = {
    body?: never;
    path: {
        /**
         * Seat ID
         */
        seat_id: string;
    };
    query?: never;
    url: '/api/coworking/seats/{seat_id}';
};

export type GetSeatByIdErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type GetSeatByIdError = GetSeatByIdErrors[keyof GetSeatByIdErrors];

export type GetSeatByIdResponses = {
    200: Seat;
};

export type GetSeatByIdResponse = GetSeatByIdResponses[keyof GetSeatByIdResponses];

export type EditSeatByIdData = {
    body: SeatUpdate;
    path: {
        /**
         * Seat ID
         */
        seat_id: string;
    };
    query?: never;
    url: '/api/coworking/seats/{seat_id}';
};

export type EditSeatByIdErrors = {
    /**
     * Invalid body
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type EditSeatByIdError = EditSeatByIdErrors[keyof EditSeatByIdErrors];

export type EditSeatByIdResponses = {
    /**
     * Seat was successfully edited
     */
    200: Seat;
};

export type EditSeatByIdResponse = EditSeatByIdResponses[keyof EditSeatByIdResponses];

export type HealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type HealthResponses = {
    /**
     * API is working
     */
    200: unknown;
};

export type PingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/ping';
};

export type PingResponses = {
    /**
     * API is working
     */
    200: unknown;
};

export type CreateReservationData = {
    body: CreateReservation;
    path?: never;
    query?: never;
    url: '/api/reservations';
};

export type CreateReservationErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type CreateReservationError = CreateReservationErrors[keyof CreateReservationErrors];

export type CreateReservationResponses = {
    200: Reservation;
};

export type CreateReservationResponse = CreateReservationResponses[keyof CreateReservationResponses];

export type CancelReservationData = {
    body?: never;
    path: {
        /**
         * Reservation ID
         */
        reservation_id: string;
    };
    query?: never;
    url: '/api/reservations/{reservation_id}';
};

export type CancelReservationErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type CancelReservationError = CancelReservationErrors[keyof CancelReservationErrors];

export type CancelReservationResponses = {
    204: void;
};

export type CancelReservationResponse = CancelReservationResponses[keyof CancelReservationResponses];

export type GetReservationData = {
    body?: never;
    path: {
        /**
         * Reservation ID
         */
        reservation_id: string;
    };
    query?: never;
    url: '/api/reservations/{reservation_id}';
};

export type GetReservationErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type GetReservationError = GetReservationErrors[keyof GetReservationErrors];

export type GetReservationResponses = {
    200: Reservation;
};

export type GetReservationResponse = GetReservationResponses[keyof GetReservationResponses];

export type RescheduleReservationData = {
    body: ReservationUpdate;
    path: {
        /**
         * Reservation ID
         */
        reservation_id: string;
    };
    query?: never;
    url: '/api/reservations/{reservation_id}';
};

export type RescheduleReservationErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type RescheduleReservationError = RescheduleReservationErrors[keyof RescheduleReservationErrors];

export type RescheduleReservationResponses = {
    200: Reservation;
};

export type RescheduleReservationResponse = RescheduleReservationResponses[keyof RescheduleReservationResponses];

export type ConfirmReservationData = {
    body?: never;
    path: {
        /**
         * Reservation ID
         */
        reservation_id: string;
    };
    query?: never;
    url: '/api/reservations/{reservation_id}/confirm';
};

export type ConfirmReservationErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    404: ApiError;
};

export type ConfirmReservationError = ConfirmReservationErrors[keyof ConfirmReservationErrors];

export type ConfirmReservationResponses = {
    200: Reservation;
};

export type ConfirmReservationResponse = ConfirmReservationResponses[keyof ConfirmReservationResponses];

export type ClientOptions = {
    baseURL: 'https://prod-team-8-t7nj4g3c.REDACTED/' | 'http://localhost:8080/' | (string & {});
};