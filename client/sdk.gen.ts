// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { DeleteAdminAccountData, DeleteAdminAccountResponse, DeleteAdminAccountError, GetCurrentAdminAccountData, GetCurrentAdminAccountResponse, GetCurrentAdminAccountError, EditAdminAccountData, EditAdminAccountResponse, EditAdminAccountError, AdminLoginData, AdminLoginResponse, AdminLoginError, ChangeAdminPasswordData, ChangeAdminPasswordResponse, ChangeAdminPasswordError, RegisterAdminData, RegisterAdminResponse, RegisterAdminError, DeleteAdminByIdData, DeleteAdminByIdResponse, DeleteAdminByIdError, GetAdminByIdData, GetAdminByIdResponse, GetAdminByIdError, EditAdminByIdData, EditAdminByIdResponse, EditAdminByIdError, DeleteClientAccountData, DeleteClientAccountResponse, DeleteClientAccountError, GetCurrentClientAccountData, GetCurrentClientAccountResponse, GetCurrentClientAccountError, EditClientAccountData, EditClientAccountResponse, EditClientAccountError, ClientLoginData, ClientLoginResponse, ClientLoginError, ChangeClientPasswordData, ChangeClientPasswordResponse, ChangeClientPasswordError, RegisterClientData, RegisterClientResponse, RegisterClientError, GetClientReservationsData, GetClientReservationsResponse, GetClientReservationsError, DeleteClientByIdData, DeleteClientByIdResponse, DeleteClientByIdError, GetClientByIdData, GetClientByIdResponse, GetClientByIdError, EditClientByIdData, EditClientByIdResponse, EditClientByIdError, GetClientReservationsByIdData, GetClientReservationsByIdResponse, GetClientReservationsByIdError, GetCoworkingData, GetCoworkingResponse, GetCoworkingError, EditCoworkingData, EditCoworkingResponse, EditCoworkingError, GetCoworkingSeatsData, GetCoworkingSeatsResponse, GetCoworkingSeatsError, CreateSeatData, CreateSeatResponse, CreateSeatError, DeleteSeatByIdData, DeleteSeatByIdResponse, DeleteSeatByIdError, GetSeatByIdData, GetSeatByIdResponse, GetSeatByIdError, EditSeatByIdData, EditSeatByIdResponse, EditSeatByIdError, HealthData, PingData, CreateReservationData, CreateReservationResponse, CreateReservationError, CancelReservationData, CancelReservationResponse, CancelReservationError, GetReservationData, GetReservationResponse, GetReservationError, RescheduleReservationData, RescheduleReservationResponse, RescheduleReservationError, ConfirmReservationData, ConfirmReservationResponse, ConfirmReservationError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete admin account
 */
export const deleteAdminAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteAdminAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAdminAccountResponse, DeleteAdminAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin',
        ...options
    });
};

/**
 * Get current admin account
 */
export const getCurrentAdminAccount = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentAdminAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentAdminAccountResponse, GetCurrentAdminAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin',
        ...options
    });
};

/**
 * Edit client account
 */
export const editAdminAccount = <ThrowOnError extends boolean = false>(options: Options<EditAdminAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditAdminAccountResponse, EditAdminAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Log into admin account
 */
export const adminLogin = <ThrowOnError extends boolean = false>(options: Options<AdminLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminLoginResponse, AdminLoginError, ThrowOnError>({
        url: '/api/admin/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change admin account password
 */
export const changeAdminPassword = <ThrowOnError extends boolean = false>(options: Options<ChangeAdminPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangeAdminPasswordResponse, ChangeAdminPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register new admin account
 */
export const registerAdmin = <ThrowOnError extends boolean = false>(options: Options<RegisterAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterAdminResponse, RegisterAdminError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete admin by ID
 */
export const deleteAdminById = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAdminByIdResponse, DeleteAdminByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/{admin_id}',
        ...options
    });
};

/**
 * Get admin by ID
 */
export const getAdminById = <ThrowOnError extends boolean = false>(options: Options<GetAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAdminByIdResponse, GetAdminByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/{admin_id}',
        ...options
    });
};

/**
 * Edit admin by ID
 */
export const editAdminById = <ThrowOnError extends boolean = false>(options: Options<EditAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditAdminByIdResponse, EditAdminByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/{admin_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete client account
 */
export const deleteClientAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteClientAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteClientAccountResponse, DeleteClientAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client',
        ...options
    });
};

/**
 * Get current client account
 */
export const getCurrentClientAccount = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentClientAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentClientAccountResponse, GetCurrentClientAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client',
        ...options
    });
};

/**
 * Edit client account
 */
export const editClientAccount = <ThrowOnError extends boolean = false>(options: Options<EditClientAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditClientAccountResponse, EditClientAccountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Log into client account
 */
export const clientLogin = <ThrowOnError extends boolean = false>(options: Options<ClientLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientLoginResponse, ClientLoginError, ThrowOnError>({
        url: '/api/client/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change client account password
 */
export const changeClientPassword = <ThrowOnError extends boolean = false>(options: Options<ChangeClientPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangeClientPasswordResponse, ChangeClientPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register new client account
 */
export const registerClient = <ThrowOnError extends boolean = false>(options: Options<RegisterClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterClientResponse, RegisterClientError, ThrowOnError>({
        url: '/api/client/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetches client reservations
 */
export const getClientReservations = <ThrowOnError extends boolean = false>(options?: Options<GetClientReservationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetClientReservationsResponse, GetClientReservationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/reservations',
        ...options
    });
};

/**
 * Delete client by ID
 */
export const deleteClientById = <ThrowOnError extends boolean = false>(options: Options<DeleteClientByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteClientByIdResponse, DeleteClientByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/{client_id}',
        ...options
    });
};

/**
 * Get client by ID
 */
export const getClientById = <ThrowOnError extends boolean = false>(options: Options<GetClientByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClientByIdResponse, GetClientByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/{client_id}',
        ...options
    });
};

/**
 * Edit client by ID
 */
export const editClientById = <ThrowOnError extends boolean = false>(options: Options<EditClientByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditClientByIdResponse, EditClientByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/{client_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetches client reservations
 */
export const getClientReservationsById = <ThrowOnError extends boolean = false>(options: Options<GetClientReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClientReservationsByIdResponse, GetClientReservationsByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client/{client_id}/reservations',
        ...options
    });
};

/**
 * Get info about coworking
 */
export const getCoworking = <ThrowOnError extends boolean = false>(options?: Options<GetCoworkingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCoworkingResponse, GetCoworkingError, ThrowOnError>({
        url: '/api/coworking',
        ...options
    });
};

/**
 * Edit coworking info
 */
export const editCoworking = <ThrowOnError extends boolean = false>(options: Options<EditCoworkingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditCoworkingResponse, EditCoworkingError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/coworking',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get info about coworking seats
 */
export const getCoworkingSeats = <ThrowOnError extends boolean = false>(options?: Options<GetCoworkingSeatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCoworkingSeatsResponse, GetCoworkingSeatsError, ThrowOnError>({
        url: '/api/coworking/seats',
        ...options
    });
};

/**
 * Creates a new seat in the coworking
 */
export const createSeat = <ThrowOnError extends boolean = false>(options: Options<CreateSeatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSeatResponse, CreateSeatError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/coworking/seats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete seat by ID
 */
export const deleteSeatById = <ThrowOnError extends boolean = false>(options: Options<DeleteSeatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSeatByIdResponse, DeleteSeatByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/coworking/seats/{seat_id}',
        ...options
    });
};

/**
 * Get seat by ID
 */
export const getSeatById = <ThrowOnError extends boolean = false>(options: Options<GetSeatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeatByIdResponse, GetSeatByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/coworking/seats/{seat_id}',
        ...options
    });
};

/**
 * Edit seat by ID
 */
export const editSeatById = <ThrowOnError extends boolean = false>(options: Options<EditSeatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditSeatByIdResponse, EditSeatByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/coworking/seats/{seat_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test that API is working
 */
export const health = <ThrowOnError extends boolean = false>(options?: Options<HealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

/**
 * Test that API is working
 */
export const ping = <ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/ping',
        ...options
    });
};

/**
 * Creates a new reservation
 */
export const createReservation = <ThrowOnError extends boolean = false>(options: Options<CreateReservationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReservationResponse, CreateReservationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reservations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel reservation by ID
 */
export const cancelReservation = <ThrowOnError extends boolean = false>(options: Options<CancelReservationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelReservationResponse, CancelReservationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reservations/{reservation_id}',
        ...options
    });
};

/**
 * Get reservation by ID
 */
export const getReservation = <ThrowOnError extends boolean = false>(options: Options<GetReservationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReservationResponse, GetReservationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reservations/{reservation_id}',
        ...options
    });
};

/**
 * Edit reservation by ID
 */
export const rescheduleReservation = <ThrowOnError extends boolean = false>(options: Options<RescheduleReservationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RescheduleReservationResponse, RescheduleReservationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reservations/{reservation_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Confirm reservation by ID
 */
export const confirmReservation = <ThrowOnError extends boolean = false>(options: Options<ConfirmReservationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfirmReservationResponse, ConfirmReservationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reservations/{reservation_id}/confirm',
        ...options
    });
};